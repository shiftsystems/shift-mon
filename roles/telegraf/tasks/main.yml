- name: Make sure GPG is installed
  ansible.builtin.apt:
    name: gpg
    state: present
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: Add GPG key for Influx data on Debian based systems
  ansible.builtin.apt_key:
    url: https://repos.influxdata.com/influxdata-archive_compat.key
    state: present
    keyring: /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: Remove old repo for Debian based systems
  ansible.builtin.apt_repository:
    repo: "deb https://repos.influxdata.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} stable"
    state: absent
    update_cache: false
  become: true
  ignore_errors: true
  when: ansible_facts['os_family'] == "Debian"

- name: Add Influx data repo for Debian based systems
  ansible.builtin.apt_repository:
    repo: "deb https://repos.influxdata.com/debian stable main"
    state: present
    update_cache: false
  become: true
  ignore_errors: true
  when: ansible_facts['os_family'] == "Debian"  

- name: Add repo for Redhat based systems
  ansible.builtin.yum_repository:
    name: influxdb
    description: influx db software
    baseurl: https://repos.influxdata.com/centos/{{ ansible_distribution_major_version }}/x86_64/stable/
    gpgcheck: true
    gpgkey: https://repos.influxdata.com/influxdata-archive_compat.key
    state: present
  become: true
  when: ansible_facts['os_family'] == "RedHat" and ansible_distribution != "Fedora"

- name: Add repo for Fedora
  ansible.builtin.yum_repository:
    name: influxdb
    description: influx db software
    baseurl: https://repos.influxdata.com/centos/9/x86_64/stable/
    gpgcheck: false
    gpgkey: https://repos.influxdata.com/influxdata-archive_compat.key
    state: present
  become: true
  when: ansible_distribution == "Fedora"

- name: Install Telegraf on Debian based systems
  ansible.builtin.apt:
    name: telegraf
    update_cache: true
    state: latest
  become: true
  when: ansible_facts['os_family'] == "Debian"
  notify: Restart Telegraf

- name: Install Telegraf on Redhat based systems
  ansible.builtin.dnf:
    name: telegraf
    state: latest
  become: true
  when: ansible_facts['os_family'] == "RedHat"
  notify: Restart Telegraf

- name: Add telegraf defaults file
  ansible.builtin.template:
    src: telegraf-defaults.j2
    dest: /etc/default/telegraf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  notify: Restart Telegraf

- name: Download telegraf config
  ansible.builtin.template:
    src: "telegraf.conf"
    dest: /etc/telegraf/telegraf.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  notify: Restart Telegraf

- name: Add Processor config
  ansible.builtin.template:
    src: processes.conf
    dest: /etc/telegraf/telegraf.d/processes.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  when: processes is defined
  become: true
  notify: Restart Telegraf

- name: Gather Systemd units
  ansible.builtin.service_facts:

- name: Add Tetragon config when Tetragon is installed
  ansible.builtin.template:
    src: tetragon.conf
    dest: /etc/telegraf/telegraf.d/tetragon.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'tetragon.service' in ansible_facts.services and 'tetragon' not in do_not_instrument"

- name: Add Meshcentral Config if Meshcentral is installed
  ansible.builtin.copy:
    src: "linux/mesh-central.conf"
    dest: /etc/telegraf/telegraf.d/mesh-central.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'meshagent.service' in ansible_facts.services and 'meshagent' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add Crowdsec Config if Crowdsec is installed
  ansible.builtin.copy:
    src: "linux/crowdsec.conf"
    dest: /etc/telegraf/telegraf.d/crowdsec.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'crowdsec.service' in ansible_facts.services and 'crowdsec' not in do_not_instrument"
  notify: Restart Telegraf

- name: Remove Mispelled Adguard config
  ansible.builtin.file:
    path: /etc/telegraf/telegraf.d/adgaurd.conf
    state: absent
  become: true
  when: "'AdGuardHome.service' in ansible_facts.services and 'AdGuardHome' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add Adguard Config if Adguard is installed
  ansible.builtin.template:
    src: "adguard.conf"
    dest: /etc/telegraf/telegraf.d/adguard.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'AdGuardHome.service' in ansible_facts.services and 'AdGuardHome' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add telegraf to the nginx group on RedHat based systems
  ansible.builtin.user:
    name: telegraf
    groups: root
    append: true
  become: true
  when:
    - "ansible_facts['os_family'] == 'RedHat'"
    - "'nginx.service' in ansible_facts.services or 'httpd.service' in ansible_facts.services"
    - "'nginx' not in do_not_instrument"
    - "'httpd' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add Caddy Config if Caddy is installed
  ansible.builtin.template:
    src: "caddy.conf"
    dest: /etc/telegraf/telegraf.d/caddy.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'caddy.service' in ansible_facts.services and 'caddy' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add telegraf to the adm group on Debian based systems
  ansible.builtin.user:
    name: telegraf
    groups: adm
    append: true
  become: true
  when: ansible_facts['os_family'] == "Debian"
  notify: Restart Telegraf

- name: Add http config When nginx or Apache Httpd is installed
  ansible.builtin.template:
    src: "http.conf"
    dest: /etc/telegraf/telegraf.d/http.conf
  become: true
  when: 
   - "'nginx.service' in ansible_facts.services or 'apache2.service' in ansible_facts.services or 'httpd.service' in ansible_facts.services"
   - "'nginx' not in do_not_instrument"
   - "'httpd' not in do_not_instrument"
  notify: Restart Telegraf

- name: Remove old nginx and httpd configs
  ansible.builtin.file:
    path: "/etc/telegraf/telegraf.d/{{ item }}"
    state: absent
  become: true
  notify: Restart Telegraf
  with_items:
    - "nginx.conf"
    - "httpd.conf"

- name: Install FreeIPA healthcheck package
  ansible.builtin.package:
    name: freeipa-healthcheck
    state: present
  become: true
  when: 
   - "'ipa.service' in ansible_facts.services"
   - "'ipa_server' not in do_not_instrument"

- name: Enable FreeIPA healthcheck timer
  ansible.builtin.systemd:
    name: ipa-healthcheck.timer
    state: started
    enabled: true
  become: true
  when:
   - "'ipa.service' in ansible_facts.services"
   - "'ipa_server' not in do_not_instrument"

- name: Add FreeIPA Server config When FreeIPA is installed
  ansible.builtin.template:
    src: "ipa-server.conf"
    dest: /etc/telegraf/telegraf.d/ipa-server.conf
  become: true
  when: 
   - "'ipa.service' in ansible_facts.services"
   - "'ipa_server' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add IPVS config if Keepalived is installed
  ansible.builtin.copy:
    src: "linux/ipvs.conf"
    dest: /etc/telegraf/telegraf.d/ipvs.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'keepalived.service' in ansible_facts.services and 'keepalived' not in do_not_instrument"
  notify: Restart Telegraf

- name: Create docker group when docker is selected
  ansible.builtin.group:
    name: docker
    state: present
  when: "'docker.service' in ansible_facts.services and 'docker' not in do_not_instrument"

- name: Add telegraf to docker group when docker is installed
  ansible.builtin.user:
    name: telegraf
    groups: docker
    append: true
  become: true
  when: "'docker.service' in ansible_facts.services and 'docker' not in do_not_instrument"
  notify: Restart Telegraf

- name: Deploy Docker config When Docker is installed
  ansible.builtin.copy:
    src: "linux/docker.conf"
    dest: /etc/telegraf/telegraf.d/docker.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'docker.service' in ansible_facts.services and 'docker' not in do_not_instrument"
  notify: Restart Telegraf

- name: Deploy Podman config When Podman service is present
  ansible.builtin.copy:
    src: "linux/podman.conf"
    dest: /etc/telegraf/telegraf.d/podman.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'podman.service' in ansible_facts.services and 'podman' not in do_not_instrument"
  notify: Restart Telegraf

- name: Deploy Libvirt config When Libvirt service is present
  ansible.builtin.copy:
    src: "linux/libvirt.conf"
    dest: /etc/telegraf/telegraf.d/libvirt.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'libvirtd.service' in ansible_facts.services and 'libvirtd' not in do_not_instrument"
  notify: Restart Telegraf

- name: MySQL config when MySQL is installed
  ansible.builtin.copy:
    src: "linux/mysql.conf"
    dest: /etc/telegraf/telegraf.d/mysql.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'mysqld.service' or 'mysql.service' in ansible_facts.services and 'mysql' not in do_not_instrument"
  notify: Restart Telegraf

- name: Deploy Postgres config
  ansible.builtin.template:
    src: "postgres.conf"
    dest: "/etc/telegraf/telegraf.d/postgres.conf"
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: shiftmon_postgres_hosts is defined
  notify: Restart Telegraf

- name: Fleet config when Fleet is installed
  ansible.builtin.copy:
    src: "linux/fleet.conf"
    dest: /etc/telegraf/telegraf.d/fleet.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'fleetdm.service' in ansible_facts.services"
  notify: Restart Telegraf

- name: Add Traefik log config to telegraf
  ansible.builtin.template:
    src: telegraf-traefik.conf
    dest: /etc/telegraf/telegraf.d/traefik.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: telegraf_traefik_config is defined and telegraf_traefik_config
  notify: Restart Telegraf

- name: Add logrotate config
  ansible.builtin.template:
    src: logrotate-traefik.conf
    dest: /etc/logrotate.d/traefik.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: telegraf_traefik_config is defined and telegraf_traefik_config
  notify: Restart Telegraf

- name: Check if ZFS is installed
  ansible.builtin.stat:
    path: /etc/zfs/
  register: zfs_path

- name: Add ZFS config to telegraf
  ansible.builtin.copy:
    src: "linux/zfs.conf"
    dest: /etc/telegraf/telegraf.d/zfs.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  notify: Restart Telegraf
  when: "zfs_path.stat.exists and 'zfs' not in do_not_instrument"

- name: Check if ROCM SMI is installed from repos
  ansible.builtin.stat:
    path: /usr/bin/rocm-smi
  register: rocm_smi_repo

- name: Check if ROCM SMI is installed from propetairy drivers
  ansible.builtin.stat:
    path: /opt/rocm/rocm-smi
  register: rocm_smi_propetairy


- name: Add ROCM SMI config to telegraf
  ansible.builtin.template:
    src: "rocm.conf"
    dest: /etc/telegraf/telegraf.d/rocm.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  notify: Restart Telegraf
  when: 
    - rocm_smi_repo.stat.exists or rocm_smi_propetairy.stat.exists
    - rocm not in do_not_instrument


- name: Deploy VSphere config when Vsphere Creds are Available
  ansible.builtin.copy:
    src: "linux/vsphere.conf"
    dest: /etc/telegraf/telegraf.d/vsphere.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "vsphere_enabled is defined and vsphere_enabled"
  notify: Restart Telegraf

- name: Deploy Nut config
  ansible.builtin.copy:
    src: "linux/nut.conf"
    dest: /etc/telegraf/telegraf.d/nut.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "nut_enabled"
  notify: Restart Telegraf

- name: Deploy Prometheus scraping config
  ansible.builtin.template:
    src: "prometheus.conf"
    dest: /etc/telegraf/telegraf.d/prometheus.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "shiftmon_prometheus_urls is defined"
  notify: Restart Telegraf

- name: Deploy SNMP Interfaces config
  ansible.builtin.template:
    src: "snmp.conf"
    dest: /etc/telegraf/telegraf.d/snmp.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "shiftmon_snmp_if_agents is defined"
  notify: Restart Telegraf

- name: Install snmp tools on Redhat based systems
  ansible.builtin.dnf:
    name: net-snmp-utils
    state: present
  become: true
  when:
    - shiftmon_snmp_if_agents is defined
    - ansible_facts['os_family'] in ["RedHat","AlmaLinux"]

- name: Install snmp tools on Debian based systems
  ansible.builtin.apt:
    name: snmp
    state: present
  become: true
  when:
    - shiftmon_snmp_if_agents is defined
    - ansible_facts['os_family'] == "Debian"

- name: Deploy Haproxy config
  ansible.builtin.template:
    src: "haproxy.conf"
    dest: /etc/telegraf/telegraf.d/haproxy.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "haproxy_stats_path is defined"
  notify: Restart Telegraf

- name: Deploy Open LDAP config when Open LDAP Creds are Available
  ansible.builtin.template:
    src: "openldap.conf"
    dest: /etc/telegraf/telegraf.d/openldap.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "openldap_enabled is defined and openldap_enabled"
  notify: Restart Telegraf

- name: Install SMART Monitoring packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: latest
  become: true
  when: ansible_facts['virtualization_role'] != 'guest' and (deploy_smart is not defined or deploy_smart)
  with_items:
    - smartmontools
    - nvme-cli

- name: Install Sensors on RedHat based systems
  ansible.builtin.dnf:
    name: lm_sensors
    state: latest
  become: true
  when:
    - ansible_facts['virtualization_role'] != 'guest' 
    - deploy_sensors is not defined or deploy_smart
    - ansible_facts['os_family'] == "RedHat"

- name: Install Sensors on Debian based systems
  ansible.builtin.apt:
    name: lm-sensors
    state: latest
  become: true
  when:
    - ansible_facts['virtualization_role'] != 'guest' 
    - deploy_sensors is not defined or deploy_smart
    - ansible_facts['os_family'] == "Debian"

- name: Add sensors config to telegraf
  ansible.builtin.template:
    src: "sensors.conf"
    dest: /etc/telegraf/telegraf.d/sensors.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  notify: Restart Telegraf
  when: ansible_facts['virtualization_role'] != 'guest' and (deploy_smart is not defined or deploy_smart)

- name: Deploy SMART Monitoring Config
  ansible.builtin.copy:
    src: "linux/smart.conf"
    dest: /etc/telegraf/telegraf.d/smart.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: ansible_facts['virtualization_role'] != 'guest' and (deploy_smart is not defined or deploy_smart)
  notify: Restart Telegraf

- name: Add telegraf to the MySQL group on Debian based systems
  ansible.builtin.file:
    path: "/tmp/stubby"
    state: absent
  when: "'mysqld.service' or 'mysql.service' in ansible_facts.services and 'mysql' not in do_not_instrument"
  notify: Restart Telegraf

- name: Add HTTPS Blackbox config
  ansible.builtin.template:
    src: blackbox-https.conf
    dest: /etc/telegraf/telegraf.d/blackbox-https.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: blackbox_https_urls is defined and blackbox_https_urls
  notify: Restart Telegraf

- name: Add DNS Blackbox config
  ansible.builtin.template:
    src: blackbox-dns.conf
    dest: /etc/telegraf/telegraf.d/blackbox-dns.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: blackbox_dns_queries is defined and blackbox_dns_queries
  notify: Restart Telegraf

- name: Add Ping Blackbox config
  ansible.builtin.template:
    src: blackbox-ping.conf
    dest: /etc/telegraf/telegraf.d/blackbox-ping.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: blackbox_ping_hosts is defined and blackbox_ping_hosts
  notify: Restart Telegraf

- name: Add Net Response Blackbox config
  ansible.builtin.template:
    src: blackbox-net.conf
    dest: /etc/telegraf/telegraf.d/blackbox-net.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: blackbox_net_hosts is defined and blackbox_net_hosts
  notify: Restart Telegraf

- name: Add Blocky DNS config
  ansible.builtin.template:
    src: blocky.conf
    dest: /etc/telegraf/telegraf.d/blocky.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'blocky.service' in ansible_facts.services and 'blocky' not in do_not_instrument"

- name: Add Tailscale config
  ansible.builtin.template:
    src: tailscale.conf
    dest: /etc/telegraf/telegraf.d/tailscale.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: "'tailscaled.service' in ansible_facts.services and 'tailscaled' not in do_not_instrument"

- name: Install Rsyslog
  ansible.builtin.package:
    name: rsyslog
    state: latest
  become: true
  when: syslog is defined and syslog == "rsyslog"
  notify: Restart Syslog

- name: Place Rsyslog config is installed when syslog is enabled
  ansible.builtin.copy:
    src: "linux/50-telegraf.conf"
    dest: /etc/rsyslog.d/50-telegraf.conf
  become: true
  when: syslog is defined and syslog == "rsyslog"
  notify: Restart Syslog

- name: Start and enable Rsyslog service
  ansible.builtin.systemd:
    name: rsyslog
    state: started
    enabled: true
  become: true
  when: syslog is defined and syslog == "rsyslog"

- name: Add Telegraf config for syslog
  ansible.builtin.template:
    src: "syslog.conf"
    dest: /etc/telegraf/telegraf.d/syslog.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: syslog is defined
  notify: Restart Telegraf

- name: Add User provided Telegraf configs
  ansible.builtin.template:
    src: "{{ item.value }}"
    dest: "/etc/telegraf/telegraf.d/{{ item.key}}.conf"
  become: true
  notify: Restart Telegraf
  with_dict: "{{ telegraf_config_paths }}"
  when:
    - telegraf_config_paths is defined

- name: Add Telegraf config for remote syslog
  ansible.builtin.template:
    src: "remote-syslog.conf"
    dest: /etc/telegraf/telegraf.d/remote-syslog.conf
    mode: "660"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  become: true
  when: remote_syslog is defined and remote_syslog
  notify: Restart Telegraf

- name: Allow remote syslog traffic on UFW
  community.general.ufw:
    rule: allow
    port: 6666
    proto: udp
  become: true
  when: "remote_syslog is defined and remote_syslog and 'ufw.service' in ansible_facts.services"

- name: Allow remote syslog traffic on Firewalld
  ansible.posix.firewalld:
    state: enabled
    port: 6666/udp
  become: true
  when: "remote_syslog is defined and remote_syslog and 'firewalld.service' in ansible_facts.services"

- name: Enable forwarding systemd journal to syslog
  block:
    - name: Add Syslog Forwarding from etc
      ansible.builtin.lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^ForwardToSyslog='
        line: 'ForwardToSyslog=yes'
      become: true
      when: journald_forwarding and syslog is defined
      notify: Restart Journald
  rescue:
    - name: Add Syslog Forwarding from usr
      ansible.builtin.lineinfile:
        path: /usr/lib//systemd/journald.conf
        regexp: '^ForwardToSyslog='
        line: 'ForwardToSyslog=yes'
      become: true
      when: journald_forwarding and syslog is defined
      notify: Restart Journald

- name: Create Telegraf override directory
  ansible.builtin.file:
    name: /etc/systemd/system/telegraf.service.d
    state: directory
  become: true
  when: telegraf_user != 'telegraf'

- name: Configure Telegraf to run as non default user
  ansible.builtin.template:
    src: override.conf
    dest: /etc/systemd/system/telegraf.service.d/override.conf
  become: true
  when: telegraf_user != 'telegraf'
  notify: Restart Telegraf

- name: Add global tags
  ansible.builtin.template:
    src: global_tags.conf.j2
    dest: /etc/telegraf/telegraf.d/global_tags.conf
    mode: "0640"
    owner: "{{ telegraf_user }}"
    group: "telegraf"
  when: global_telegraf_tags | length > 0
  become: true
  notify: Restart Telegraf

- name: Start and Enable Telegraf
  ansible.builtin.systemd:
    name: telegraf
    enabled: true
    state: started
  become: true
