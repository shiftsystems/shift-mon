{% if oncall_enabled %}
x-environment: &oncall-environment
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: "https://{{ oncall.domain }}"
  SECRET_KEY: "{{ oncall.secret }}"
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000
{% endif %}
services:
{% if oncall_enabled %}
  engine:
    image: docker.io/grafana/oncall
    restart: always
    command: >
      sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    volumes:
      - type: bind
        source: /opt/shift-mon/oncall
        target: /var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  celery:
    image: docker.io/grafana/oncall
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    volumes:
      - /opt/shift-mon/oncall:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  oncall_db_migration:
    image: docker.io/grafana/oncall
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    volumes:
      - type: bind
        source: /opt/shift-mon/oncall
        target: /var/lib/oncall
    depends_on:
      redis:
        condition: service_healthy
{% endif %}
  grafana:
    image: docker.io/grafana/grafana-oss:latest
    restart: unless-stopped
    volumes:
      - type: bind
        source: /opt/shift-mon/grafana-config
        target: /etc/grafana
      - type: bind
        source: /opt/shift-mon/grafana
        target: /var/lib/grafana
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: 'wget -qO- http://127.0.0.1:3000/api/health'
      interval: '30s'
      timeout: '10s'
      retries: 5
    environment:
      GF_INSTALL_PLUGINS: grafana-oncall-app,https://github.com/VictoriaMetrics/grafana-datasource/releases/download/{{ vm_datasource_release.json.tag_name }}/victoriametrics-datasource-{{ vm_datasource_release.json.tag_name }}.zip;victoriametrics-datasource,https://github.com/VictoriaMetrics/victorialogs-datasource/releases/download/{{ vl_datasource_release.json.tag_name }}/victorialogs-datasource-{{ vl_datasource_release.json.tag_name }}.zip;victorialogs-datasource
  loki:
    image: docker.io/grafana/loki:latest
    restart: unless-stopped
    volumes:
      - type: bind
        source: /opt/shift-mon/loki
        target: /loki
      - type: bind
        source: /opt/shift-mon/loki-config
        target: /etc/loki/
    command:
      - "-config.file=/etc/loki/loki-config.yml"
    healthcheck:
      test: "wget -qO- http://127.0.0.1:3100/ready"
      interval: "30s"
      timeout: "10s"
      retries: 5
  victoriametrics:
    restart: unless-stopped
{% if victoria.license is defined %}
    image: docker.io/victoriametrics/victoria-metrics:enterprise-stable
{% else %}
    image: docker.io/victoriametrics/victoria-metrics:stable
{% endif %}
    volumes:
      - type: bind
        source: /opt/shift-mon/victoriametrics
        target: /victoriametrics
      - type: bind
        source: /opt/shift-mon/victoriametrics-storage
        target: /victoriametrics-storage
    command:
      - "-retentionPeriod=90d"
      - "-storageDataPath=/victoriametrics-storage"
      - "-httpListenAddr=:8428"
      - "-vmalert.proxyURL=http://vmalert:9093"
      - "-promscrape.config=/victoriametrics/scrape-config.yml"
{% if victoria.license is defined %}
      - "-license={{ victoria.license }}"
{% endif %}
{% if victoria.license is defined and victoria.retention_filter is defined %}
      - "-retentionFilter={{ victoria.retention_filter }}"
{% endif %}
{% if victoria.license is defined and victoria.downsampling_period is defined %}
      - "-downsampling.period={{ victoria.downsampling_period }}"
{% endif %}
    healthcheck:
      test: "wget -qO- http://127.0.0.1:8428/-/healthy"
      interval: "30s"
      timeout: "10s"
      retries: 5
{% if victoria.insecure is defined and victoria.insecure is true %}
    ports:
      - 8428:8428
{% endif %}
  vmalert:
    restart: unless-stopped
{% if victoria.license is defined %}
    image: docker.io/victoriametrics/vmalert:enterprise-stable
{% else %}
    image: docker.io/victoriametrics/vmalert:stable
{% endif %}
    volumes:
      - type: bind
        source: /opt/shift-mon/vmalert/rules
        target: /rules
    command:
      - "-datasource.url=http://victoriametrics:8428"
      - "-remoteWrite.url=http://victoriametrics:8428"
      - "-remoteRead.url=http://victoriametrics:8428"
      - "-httpListenAddr=0.0.0.0:9093"
      - "-rule=/rules/*.yaml"
      - "-rule=/rules/*.yml"
      - "-configCheckInterval=1m"
{% if victoria.license is defined %}
      - "-license={{ victoria.license }}"
{% endif %}
    healthcheck:
      test: "wget -qO- http://127.0.0.1:9093/-/healthy"
      interval: "30s"
      timeout: "10s"
      retries: 5
    ports:
     - "127.0.0.1:9093:9093"
  vmauth:
    restart: unless-stopped
{% if victoria.license is defined %}
    image: docker.io/victoriametrics/vmauth:enterprise-stable
{% else %}
    image: docker.io/victoriametrics/vmauth:stable
{% endif %}
    volumes:
      - type: bind
        source: /opt/shift-mon/vmauth
        target: /auth
    command:
      - "-auth.config=/auth/auth-config.yml"
      - "-httpListenAddr=0.0.0.0:8427"
{% if victoria.license is defined %}
      - "-license={{ victoria.license }}"
{% endif %}
    healthcheck:
      test: "wget -qO- http://127.0.0.1:8427/-/healthy"
      interval: "30s"
      timeout: "10s"
      retries: 5
    ports:
     - "127.0.0.1:8427:8427"
{% if vmanomaly_enabled and victoria.license is defined %}
  vmanomaly:
    image: victoriametrics/vmanomaly:latest
    restart: always
    depends_on:
      victoriametrics:
        condition: service_healthy
    volumes:
      - type: bind
        source: /opt/shift-mon/vmanomaly-config
        target: /config
      - type: bind
        source: /opt/shift-mon/vmanomaly-models
        target: /models
    command:
      - "/config/config.yml"
      - "--license={{ victoria.license }}"
    user: "1000:1000"
    environment:
      VMANOMALY_MODEL_DUMPS_DIR: /models
{% endif %}
{% if uptime_kuma_enabled %}
  uptime-kuma:
    image: docker.io/louislam/uptime-kuma:1
    restart: always
    volumes:
      - type: bind
        source: /opt/shift-mon/uptime-kuma
        target: /app/data
{% endif %}
  redis:
    image: docker.io/eqalpha/keydb:latest
    restart: always
    expose:
      - 6379
    volumes:
      - type: bind
        source: /opt/shift-mon/keydb
        target: /data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10
  traefik:
    restart: unless-stopped
    image: docker.io/traefik:latest
    volumes:
      - type: bind
        source: /opt/shift-mon/traefik
        target: /etc/traefik
    ports:
     - "80:80"
     - "443:443"
     - "127.0.0.1:8082:8082"
{% if dns.provider is defined and dns.auth_values is defined %}
    environment:
{% for key, value in dns.auth_values.items() %}
      {{key}}: '{{value}}'
{% endfor %}
{% endif %}
    command:
      - "--auth.config=/config/auth-config.yml"
