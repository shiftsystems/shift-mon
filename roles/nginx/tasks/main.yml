- name: Install Certbot and Nginx on Debian based systems
  apt:
    name: "{{ debian_packages }}"
    state: present
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: Add EPEL Release on Redhat Based Systems
  dnf:
    name: epel-release
    state: present
  become: true
  when: ansible_facts['os_family'] in ["RedHat","Alma Linux"]

- name: Install Certbot and Nginx on Redhat based systems
  dnf:
    name: "{{ redhat_packages }}"
    state: present
  become: true
  when: ansible_facts['os_family'] == "RedHat"

- name: remove default configs from nginx on Debian Based systems
  file: 
    name: "/etc/nginx/sites-enabled/default"
    state: absent
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: generate http usernames and passwords
  htpasswd:
    path: /etc/nginx/htpasswd
    name: '{{ item.key }}'
    password: '{{ item.value }}'
  become: true
  with_dict: '{{ users }}'

- name: paste in nginx configs on Debian based systems
  template:
    src: "{{ item }}.conf"
    dest: /etc/nginx/sites-available/{{ item }}.conf
  become: true
  with_items: "{{ services }}"
  when: ansible_facts['os_family'] == "Debian"

- name: Change base config for Nginx on Redhat based systems
  copy: 
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  become: true
  when: ansible_facts['os_family'] in ["RedHat","Alma Linux"]

- name: paste in nginx configs on RedHat based systems
  template:
    src: "{{ item }}.conf"
    dest: /etc/nginx/conf.d/{{ item }}.conf
  become: true
  with_items: "{{ services }}"
  when: ansible_facts['os_family'] in ["RedHat","Alma Linux"]

- name: enable nginx configs on Debian Based Systems
  file:
    src: /etc/nginx/sites-available/{{ item}}.conf
    dest: /etc/nginx/sites-enabled/{{ item }}.conf
    state: link
  become: true
  with_items: "{{ services }}"
  when: ansible_facts['os_family'] == "Debian"


- name: get an ssl cert
  block:
  - name: get letsencrypt certificate
    shell: certbot certonly --non-interactive --standalone --pre-hook "sudo systemctl stop nginx" --email {{ email.alert_to_address }} --agree-tos -d {{ grafana.domain }} -d {{ victoria.domain }} -d {{ loki.domain }}
    become: true

  - name: soft link victoriametrics certs
    file: 
      src: '/etc/letsencrypt/live/{{ grafana.domain }}'
      dest: '/etc/letsencrypt/live/{{ victoria.domain }}'
      state: link
    become: true

  - name: soft link loki certs
    file: 
      src: '/etc/letsencrypt/live/{{ grafana.domain }}'
      dest: '/etc/letsencrypt/live/{{ loki.domain }}'
      state: link
    become: true

- name: Allow httpd to can network connect
  seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes
  become: true
  when: ansible_facts['os_family'] in ['AlmaLinux','RedHat'] 

- name: Allow nis to enabled
  seboolean:
    name: nis_enabled
    state: yes
    persistent: yes
  become: true
  when: ansible_facts['os_family'] in ['AlmaLinux','RedHat']

- name: start and enable nginx
  systemd:
    name: nginx
    state: restarted
    enabled: true
  become: true
