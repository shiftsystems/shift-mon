apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: admiring-swanson-39f001
spec:
    color: '#9bf445'
    name: shift-rmm
---
apiVersion: influxdata.com/v2alpha1
kind: CheckDeadman
metadata:
    name: annoying-kirch-b9f011
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    level: CRIT
    name: Proxmox Node Down
    query: |-
        from(bucket: "proxmox")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "cpustat")
          |> filter(fn: (r) => r["_field"] == "avg5")
    staleTime: 10m0s
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    timeSince: 5m0s
---
apiVersion: influxdata.com/v2alpha1
kind: CheckDeadman
metadata:
    name: clever-liskov-b9f009
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 15m0s
    level: CRIT
    name: Pfsense Host Down
    query: |-
        from(bucket: "pfsense")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "system")
          |> filter(fn: (r) => r["_field"] == "load5")
    staleTime: 10m0s
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    timeSince: 5m0s
---
apiVersion: influxdata.com/v2alpha1
kind: CheckDeadman
metadata:
    name: condescending-mendel-79f017
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    level: CRIT
    name: Linux host Down
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "system")
          |> filter(fn: (r) => r["_field"] == "load15")
          |> filter(fn: (r) => r["host"] == "connie" or r["host"] == "armin" or r["host"] == "connie.local.mathiasp.me" or r["host"] == "darius" or r["host"] == "diane" or r["host"] == "eren" or r["host"] == "erwin" or r["host"] == "historia.local.mathiasp.me" or r["host"] == "jean" or r["host"] == "mail.mathiasp.me" or r["host"] == "pbx" or r["host"] == "ymir.local.mathiasp.me")
    staleTime: 10m0s
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    timeSince: 5m0s
---
apiVersion: influxdata.com/v2alpha1
kind: CheckDeadman
metadata:
    name: sweet-shockley-f9f005
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    level: CRIT
    name: Windows Host Down
    query: |-
        from(bucket: "windows")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "system")
          |> filter(fn: (r) => r["_field"] == "load15")
    staleTime: 10m0s
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level }'
    timeSince: 1m30s
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: charming-rubin-79f00f
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 10m0s
    name: Linux High Ram Usage
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "mem")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on host ${r.host} '
    thresholds:
      - level: CRIT
        type: greater
        value: 95
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: crumbling-borg-b9f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 15m0s
    name: Pfsense High CPU Usage
    query: |-
        from(bucket: "pfsense")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "cpu")
          |> filter(fn: (r) => r["_field"] == "usage_idle")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on host ${r.host} '
    thresholds:
      - level: CRIT
        type: lesser
        value: 10
      - level: WARN
        type: lesser
        value: 25
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: earning-noether-39f005
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1h0m0s
    name: Ansible Pull Failed
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "systemd_units")
          |> filter(fn: (r) => r["name"] == "ansible-pull@base.service" or r["name"] == "ansible-pull@desktop.service")
          |> filter(fn: (r) => r["_field"] == "active_code")
          |> filter(fn: (r) => r["active"] == "failed")
          |> aggregateWindow(every: 1m, fn: min, createEmpty: false)
          |> yield(name: "min")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${ r.host}'
    thresholds:
      - level: WARN
        type: greater
        value: 2
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: elastic-jennings-79f00b
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 15m0s
    name: Linux High CPU Usage
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "cpu")
          |> filter(fn: (r) => r["_field"] == "usage_idle")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    thresholds:
      - level: CRIT
        type: lesser
        value: 10
      - level: WARN
        type: lesser
        value: 25
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: endangered-yalow-b9f005
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 10m0s
    name: Pfsense High Ram Usage
    query: |-
        from(bucket: "pfsense")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "mem")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on host ${r.host} '
    thresholds:
      - level: CRIT
        type: greater
        value: 95
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: happy-banzai-b9f00d
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 10m0s
    name: Pfsense Low disk Space
    query: |-
        from(bucket: "pfsense")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "disk")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> filter(fn: (r) => r["path"] == "/")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on host ${r.host} '
    thresholds:
      - level: CRIT
        type: greater
        value: 90
      - level: WARN
        type: greater
        value: 70
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: hopeful-buck-b9f019
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 5m0s
    name: Windows High CPU Usage
    query: |-
        from(bucket: "windows")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "cpu")
          |> filter(fn: (r) => r["_field"] == "usage_idle")
          |> filter(fn: (r) => r["cpu"] == "cpu-total")
          |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    thresholds:
      - level: CRIT
        type: lesser
        value: 10
      - level: WARN
        type: lesser
        value: 25
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: laughing-williamson-79f013
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 10m0s
    name: Linux Low Disk Space
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "disk")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on host ${r.host} '
    thresholds:
      - level: CRIT
        type: greater
        value: 90
      - level: WARN
        type: greater
        value: 70
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: magical-pike-79f003
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    name: Failed HTTP
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "http_response")
          |> filter(fn: (r) => r["_field"] == "result_code")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.server}'
    thresholds:
      - level: CRIT
        type: greater
        value: 0.1
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: naughty-black-f9f009
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    name: Windows Low Disk Space
    query: |-
        from(bucket: "windows")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "disk")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level }'
    thresholds:
      - level: WARN
        type: greater
        value: 70
      - level: CRIT
        type: greater
        value: 95
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: quizzical-keller-79f007
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 1m0s
    name: Failed SSL
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "x509_cert")
          |> filter(fn: (r) => r["_field"] == "verification_code")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.source}'
    thresholds:
      - level: CRIT
        type: greater
        value: 0.1
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: romantic-gauss-f9f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 10m0s
    name: Windows High Ram Usage
    query: |-
        from(bucket: "windows")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "mem")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.host}'
    thresholds:
      - level: CRIT
        type: greater
        value: 95
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: rustic-hertz-b9f015
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    every: 24h0m0s
    name: SSL Epiry Notice
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "x509_cert")
          |> filter(fn: (r) => r["_field"] == "expiry")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level } on ${r.source}'
    thresholds:
      - level: WARN
        type: lesser
        value: 2.456943e+06
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationEndpointPagerDuty
metadata:
    name: hungry-rubin-f9f00d
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    name: Shift Systems Pager Duty
    routingKey:
        secretRef:
            key: 069c941a2f39f000-routing-key
    status: active
    url: http://mon.shiftsystems.net:9999/orgs/5f8e21d030fb37f4/alert-history
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: beautiful-rosalind-f9f00f
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    endpointName: hungry-rubin-f9f00d
    every: 5m0s
    messageTemplate: 'Notification Rule: ${ r._notification_rule_name } triggered
        by check: ${ r._check_name }: ${ r._message }'
    name: Critical
    statusRules:
      - currentLevel: CRIT
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: laughing-matsumoto-f9f013
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    endpointName: hungry-rubin-f9f00d
    every: 1h0m0s
    messageTemplate: 'Notification Rule: ${ r._notification_rule_name } triggered
        by check: ${ r._check_name }: ${ r._message }'
    name: Warnings
    statusRules:
      - currentLevel: WARN
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: affectionate-khayyam-f9f01b
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: pfsense_interface
    query: |-
        from(bucket: "pfsense")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "net")
          |> filter(fn: (r) => r["host"] == v.pfsense_host)
          |> filter(fn: (r) => r["_field"] == "bytes_recv")
          |> keyValues(keyColumns: ["interface"])
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: busy-zhukovsky-39f007
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    name: mesh_info
    selected:
      - mesh_domain
    type: map
    values:
        mesh_domain: remote.shiftsystems.net
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: cranky-rubin-f9f017
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: windows_interface
    query: |-
        from(bucket: "windows")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "net")
          |> filter(fn: (r) => r["host"] == v.windows_host)
          |> filter(fn: (r) => r["_field"] == "bytes_recv")
          |> keyValues(keyColumns: ["interface"])
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: dangling-fermat-f9f027
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: pve_node
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: "proxmox", measurement: "nics", tag: "nodename")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: great-mayer-f9f01f
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: windows_host
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: "windows", measurement: "cpu", tag: "host")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: heuristic-greider-f9f023
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: linux_interface
    query: |-
        from(bucket: "linux")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "net")
          |> filter(fn: (r) => r["host"] == v.linux_host)
          |> filter(fn: (r) => r["_field"] == "bytes_recv")
          |> keyValues(keyColumns: ["interface"])
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: naughty-ride-39f003
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: pfsense_host
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: "pfsense", measurement: "cpu", tag: "host")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: sharp-gagarin-39f00b
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    language: flux
    name: linux_host
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: "linux", measurement: "cpu", tag: "host")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: adventuring-mendel-39f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: common_name
            fieldName: common_name
            visible: true
          - displayName: country
            fieldName: country
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: issuer_common_name
            fieldName: issuer_common_name
            visible: true
          - displayName: organization
            fieldName: organization
            visible: true
          - displayName: public_key_algorithm
            fieldName: public_key_algorithm
            visible: true
          - displayName: serial_number
            fieldName: serial_number
            visible: true
          - displayName: signature_algorithm
            fieldName: signature_algorithm
            visible: true
          - displayName: source
            fieldName: source
            visible: true
          - displayName: verification
            fieldName: verification
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: san
            fieldName: san
            visible: true
          - displayName: enddate
            fieldName: enddate
            visible: true
          - displayName: verification_code
            fieldName: verification_code
            visible: true
          - displayName: expire_time
            fieldName: expire_time
            visible: true
          - displayName: cur_time
            fieldName: cur_time
            visible: true
          - displayName: exipre_dur
            fieldName: exipre_dur
            visible: true
          - displayName: expire_dur
            fieldName: expire_dur
            visible: true
          - displayName: exire_dur
            fieldName: exire_dur
            visible: true
          - displayName: current_time
            fieldName: current_time
            visible: true
          - displayName: Expire Date
            fieldName: Expire Date
            visible: true
          - displayName: Time Till Expiration
            fieldName: Time Till Expiration
            visible: true
          - displayName: Certifcate Authority
            fieldName: Certifcate Authority
            visible: true
        height: 4
        kind: Table
        name: Invalid SSL Checks
        queries:
          - query: "from(bucket: \"linux\")\n  |> range(start: v.timeRangeStart, stop:
                v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"x509_cert\")\n
                \ |> filter(fn: (r) => r[\"_field\"] == \"verification_code\" or r[\"_field\"]
                == \"enddate\") \n  |> filter(fn: (r) => r[\"verification\"] == \"invalid\")\n
                \ |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn:
                \"_value\")\n  |> group(columns: [\"common_name\"], mode: \"by\")\n
                \ //|> drop(columns: [\"_start\",\"_stop\",\"country\",\"host\",\"serial_number\",\"_time\",\"_measurement\",\"verification_code\",\"public_key_algorithm\"])\n
                \ |> map(fn:(r) => ({ r with enddate: int(v: r.enddate) * 1000000000}))\n
                \ |> map(fn: (r) => ({ r with expire_dur: r.enddate - int(v: uint(v:
                now())) }))\n  |> map(fn:(r) => ({ r with expire_time: string(v: duration(v:
                r.expire_dur)) }))\n  |> map(fn:(r) => ({ r with _value: time(v: (r.enddate))
                }))\n  |> last()\n  |> group()\n  |> keep(columns: [\"common_name\",\"issuer_common_name\",\"_value\",\"expire_time\",\"source\"])\n
                \ |> rename(columns: {issuer_common_name: \"Certifcate Authority\",
                _value: \"Expire Date\", expire_time: \"Time Till Expiration\"})"
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 8
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: method
            fieldName: method
            visible: true
          - displayName: server
            fieldName: server
            visible: true
          - displayName: status_code
            fieldName: status_code
            visible: true
          - displayName: content_length
            fieldName: content_length
            visible: true
          - displayName: http_response_code
            fieldName: http_response_code
            visible: true
          - displayName: response_time
            fieldName: response_time
            visible: true
          - displayName: result_code
            fieldName: result_code
            visible: true
          - displayName: result_type
            fieldName: result_type
            visible: true
        height: 3
        kind: Table
        name: Successful HTTP Checks
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "http_response")
                  |> filter(fn: (r) => r["result"] == "success")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with _value: r.method }))
                  |> last()
                  |> group()
                  |> keep(columns: ["server", "status_code","response_time","result_code"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 12
        yPos: 4
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: common_name
            fieldName: common_name
            visible: true
          - displayName: country
            fieldName: country
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: issuer_common_name
            fieldName: issuer_common_name
            visible: true
          - displayName: organization
            fieldName: organization
            visible: true
          - displayName: public_key_algorithm
            fieldName: public_key_algorithm
            visible: true
          - displayName: serial_number
            fieldName: serial_number
            visible: true
          - displayName: signature_algorithm
            fieldName: signature_algorithm
            visible: true
          - displayName: source
            fieldName: source
            visible: true
          - displayName: verification
            fieldName: verification
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: san
            fieldName: san
            visible: true
          - displayName: enddate
            fieldName: enddate
            visible: true
          - displayName: verification_code
            fieldName: verification_code
            visible: true
          - displayName: expire_time
            fieldName: expire_time
            visible: true
          - displayName: cur_time
            fieldName: cur_time
            visible: true
          - displayName: exipre_dur
            fieldName: exipre_dur
            visible: true
          - displayName: expire_dur
            fieldName: expire_dur
            visible: true
          - displayName: exire_dur
            fieldName: exire_dur
            visible: true
          - displayName: current_time
            fieldName: current_time
            visible: true
          - displayName: Expire Date
            fieldName: Expire Date
            visible: true
          - displayName: Time Till Expiration
            fieldName: Time Till Expiration
            visible: true
          - displayName: Certifcate Authority
            fieldName: Certifcate Authority
            visible: true
        height: 4
        kind: Table
        name: ALL SSL Checks
        queries:
          - query: "from(bucket: \"linux\")\n  |> range(start: v.timeRangeStart, stop:
                v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"x509_cert\")\n
                \ |> filter(fn: (r) => r[\"_field\"] == \"verification_code\" or r[\"_field\"]
                == \"enddate\") \n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"],
                valueColumn: \"_value\")\n  |> group(columns: [\"common_name\"], mode:
                \"by\")\n  //|> drop(columns: [\"_start\",\"_stop\",\"country\",\"host\",\"serial_number\",\"_time\",\"_measurement\",\"verification_code\",\"public_key_algorithm\"])\n
                \ |> map(fn:(r) => ({ r with enddate: int(v: r.enddate) * 1000000000}))\n
                \ |> map(fn: (r) => ({ r with expire_dur: r.enddate - int(v: uint(v:
                now())) }))\n  |> map(fn:(r) => ({ r with expire_time: string(v: duration(v:
                r.expire_dur)) }))\n  |> map(fn:(r) => ({ r with _value: time(v: (r.enddate))
                }))\n  |> last()\n  |> group()\n  |> keep(columns: [\"common_name\",\"issuer_common_name\",\"_value\",\"expire_time\",\"source\",\"verification\"])\n
                \ |> rename(columns: {issuer_common_name: \"Certifcate Authority\",
                _value: \"Expire Date\", expire_time: \"Time Till Expiration\"})"
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 12
        yPos: 7
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: method
            fieldName: method
            visible: true
          - displayName: server
            fieldName: server
            visible: true
          - displayName: status_code
            fieldName: status_code
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
        height: 4
        kind: Table
        name: Failed HTTP Checks
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "http_response")
                  |> filter(fn: (r) => r["_field"] == "result_type")
                  |> filter(fn: (r) => r["result"] != "success")
                  |> last()
                  |> group()
                  |> keep(columns: ["server",,"result"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 4
        xPos: 8
    name: Web Stuff
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: burfect-tu-39f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: c15f8572-54da-4529-9206-08061202ffbd
            name: thunder
            type: text
            value: 75
          - hex: '#DC4E58'
            id: 0412cbeb-294d-43b0-9dc5-042b8d47f66d
            name: fire
            type: text
            value: 90
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: CPU usage
        position: overlaid
        queries:
          - query: "import \"math\"\nfrom(bucket: \"linux\")\n  |> range(start: v.timeRangeStart,
                stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"]
                == \"cpu\")\n  |> filter(fn: (r) => r[\"host\"] == v.linux_host)\n
                \ |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn:
                (r) => r[\"_field\"] == \"usage_idle\")\n  |> map(fn: (r) => ({\n
                \     r with \n      _value: 100.0 - r._value\n      })\n  )"
        width: 5
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 5
        kind: Single_Stat_Plus_Line
        name: Outbound Traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_sent")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["interface"] == v.linux_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        width: 3
        xCol: _time
        yCol: _value
        yPos: 3
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: active
            fieldName: active
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: load
            fieldName: load
            visible: true
          - displayName: name
            fieldName: name
            visible: true
          - displayName: sub
            fieldName: sub
            visible: true
        height: 4
        kind: Table
        name: Failed Services
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "systemd_units")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["active"] == "failed")
                  |> filter(fn: (r) => r["_field"] == "active_code")
                  |> first()
                  |> group()
                  |> keep(columns: ["name"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 3
        yPos: 8
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 5
        kind: Single_Stat_Plus_Line
        name: Inbound traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_sent")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["interface"] == v.linux_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
        yPos: 3
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: name
            fieldName: name
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: active
            fieldName: active
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: load
            fieldName: load
            visible: true
          - displayName: sub
            fieldName: sub
            visible: true
        height: 4
        kind: Table
        name: Services
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "systemd_units")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["_field"] == "active_code")
                  |> first()
                  |> group()
                  |> keep(columns: ["name","active","sub"])
        tableOptions:
            sortBy: name
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 7
        xPos: 3
        yPos: 8
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: 280fd6c8-cfce-4c6b-a029-7f7c220fc088
            name: thunder
            type: text
            value: 70
          - hex: '#DC4E58'
            id: eefbf8d6-92f8-44f4-980f-42c9897d5305
            name: fire
            type: text
            value: 95
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Ram usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
        width: 5
        xCol: _time
        xPos: 5
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#FFD255'
            id: 8e3ef833-8de0-4a84-baf8-2edefae8894e
            name: thunder
            type: text
            value: 70
          - hex: '#DC4E58'
            id: 0eb7e4b0-472a-4617-9392-97ab43d1d9dd
            name: fire
            type: text
            value: 90
        decimalPlaces: 2
        height: 5
        kind: Single_Stat_Plus_Line
        name: Disk usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "disk")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
        width: 4
        xCol: _time
        xPos: 6
        yCol: _value
        yPos: 3
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: URL
            fieldName: _value
            visible: true
          - displayName: host
            fieldName: host
            visible: true
        height: 1
        kind: Table
        name: Remote Access
        queries:
          - query: |-
                import "strings"
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "exec_meshinfo")
                  |> filter(fn: (r) => r["_field"] == "value")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> last()
                  |> keep(columns: ["_value"])
                  |> map(fn: (r) => ({ r with _value: strings.joinStr(arr: ["https://",v.mesh_info, "/?viewmode=11&gotonode=",r._value], v: "")}))
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 10
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Uptime
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |>filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "uptime_format")
        width: 2
        xPos: 10
        yPos: 1
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 1
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load5")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
        width: 2
        xPos: 10
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 15
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load5")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
        width: 2
        xPos: 10
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: CPU Count
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "n_cpus")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
        width: 2
        xPos: 10
        yPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Memory
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["_field"] == "total")
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 1000000000
                    })
                  )
        width: 2
        xPos: 10
        yPos: 5
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: OS
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["_measurement"] == "exec_os_release")
                  |> filter(fn: (r) => r["_field"] == "NAME")
        width: 2
        xPos: 10
        yPos: 6
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: OS version
        queries:
          - query: |-
                from(bucket: "linux")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.linux_host)
                  |> filter(fn: (r) => r["_measurement"] == "exec_os_release")
                  |> filter(fn: (r) => r["_field"] == "VERSION")
        width: 2
        xPos: 10
        yPos: 7
    name: Linux Metrics
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: hardcore-morse-39f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: Channel
            fieldName: Channel
            visible: true
          - displayName: Computer
            fieldName: Computer
            visible: true
          - displayName: EventID
            fieldName: EventID
            visible: true
          - displayName: Keywords
            fieldName: Keywords
            visible: true
          - displayName: Level
            fieldName: Level
            visible: true
          - displayName: LevelText
            fieldName: LevelText
            visible: true
          - displayName: Source
            fieldName: Source
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: Data_Category Name
            fieldName: Data_Category Name
            visible: true
          - displayName: Data_Error Description
            fieldName: Data_Error Description
            visible: true
          - displayName: Data_Path
            fieldName: Data_Path
            visible: true
          - displayName: Data_Process Name
            fieldName: Data_Process Name
            visible: true
          - displayName: Data_Remediation User
            fieldName: Data_Remediation User
            visible: true
          - displayName: Data_Signature Version
            fieldName: Data_Signature Version
            visible: true
          - displayName: Data_Threat ID
            fieldName: Data_Threat ID
            visible: true
          - displayName: Data_Threat Name
            fieldName: Data_Threat Name
            visible: true
        height: 4
        kind: Table
        name: Unremediated threats
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "win_eventlog")
                  |> filter(fn: (r) => r["Channel"] == "Microsoft-Windows-Windows Defender/Operational")
                  |> filter(fn: (r) => r["EventID"] == "1119" or r["EventID"] == "1118")
                  |> filter(fn: (r) => r["_field"] == "Data_Category Name" or r["_field"] == "Data_Error Description" or r["_field"] == "Data_Path" or r["_field"] == "Data_Process Name" or r["_field"] == "Data_Signature Version" or r["_field"] == "Data_Threat ID" or r["_field"] == "Data_Threat Name")
                  |> group(columns: ["host"], mode: "by")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> drop(columns: ["_start","_stop"])
                  |> group()
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 9
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: Channel
            fieldName: Channel
            visible: true
          - displayName: Computer
            fieldName: Computer
            visible: true
          - displayName: EventID
            fieldName: EventID
            visible: true
          - displayName: Keywords
            fieldName: Keywords
            visible: true
          - displayName: Level
            fieldName: Level
            visible: true
          - displayName: LevelText
            fieldName: LevelText
            visible: true
          - displayName: Source
            fieldName: Source
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: Data_Category Name
            fieldName: Data_Category Name
            visible: true
          - displayName: Data_Path
            fieldName: Data_Path
            visible: true
          - displayName: Data_Threat Name
            fieldName: Data_Threat Name
            visible: true
          - displayName: Message
            fieldName: Message
            visible: true
        height: 4
        kind: Table
        name: Remediated Threats
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "win_eventlog")
                  |> filter(fn: (r) => r["Channel"] == "Microsoft-Windows-Windows Defender/Operational")
                  |> filter(fn: (r) => r["EventID"] == "1117")
                  |> filter(fn: (r) => r["_field"] == "Data_Path" or r["_field"] == "Data_Threat Name" or r["_field"] == "Data_Category Name")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> drop(columns: ["_start","_stop","Channel","EventID","Keywords","Level","LevelText"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 9
        yPos: 4
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: Channel
            fieldName: Channel
            visible: true
          - displayName: Computer
            fieldName: Computer
            visible: true
          - displayName: EventID
            fieldName: EventID
            visible: true
          - displayName: Keywords
            fieldName: Keywords
            visible: true
          - displayName: Level
            fieldName: Level
            visible: true
          - displayName: LevelText
            fieldName: LevelText
            visible: true
          - displayName: Source
            fieldName: Source
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: Data_Error Description
            fieldName: Data_Error Description
            visible: true
          - displayName: Data_Source Path
            fieldName: Data_Source Path
            visible: true
          - displayName: Message
            fieldName: Message
            visible: true
        height: 4
        kind: Table
        name: Update Failure
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "win_eventlog")
                  |> filter(fn: (r) => r["Channel"] == "Microsoft-Windows-Windows Defender/Operational")
                  |> filter(fn: (r) => r["EventID"] == "2001")
                  |> filter(fn: (r) => r["_field"] == "Data_Error Description" or r["_field"] == "Data_Source Path" or r["_field"] == "Message")
                  |> group(columns: ["host"], mode: "by")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> drop(columns: ["_start","_stop"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 3
        xPos: 9
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: Channel
            fieldName: Channel
            visible: true
          - displayName: Computer
            fieldName: Computer
            visible: true
          - displayName: EventID
            fieldName: EventID
            visible: true
          - displayName: Keywords
            fieldName: Keywords
            visible: true
          - displayName: Level
            fieldName: Level
            visible: true
          - displayName: LevelText
            fieldName: LevelText
            visible: true
          - displayName: Source
            fieldName: Source
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: Data_Last full scan end time
            fieldName: Data_Last full scan end time
            visible: true
          - displayName: Data_Last quick scan end time
            fieldName: Data_Last quick scan end time
            visible: true
        height: 4
        kind: Table
        name: Last AV Scan
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "win_eventlog")
                  |> filter(fn: (r) => r["Channel"] == "Microsoft-Windows-Windows Defender/Operational")
                  |> filter(fn: (r) => r["EventID"] == "1151")
                  |> filter(fn: (r) => r["_field"] == "Data_Last quick scan end time" or r["_field"] == "Data_Last full scan end time")
                  |> last()
                  |> group(columns: ["host"], mode: "by")
                  |> pivot(rowKey:["host","_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> group()
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 3
        xPos: 9
        yPos: 4
    name: Microsoft Defender
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: loving-kowalevski-79f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: 20889c02-f7b4-4d5e-b943-1a9cbbbfa6a3
            name: thunder
            type: text
            value: 70
          - hex: '#DC4E58'
            id: 641ecba3-9ebf-4829-8288-7da672894089
            name: fire
            type: text
            value: 90
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: CPU usage
        position: overlaid
        queries:
          - query: "from(bucket: \"pfsense\")\n  |> range(start: v.timeRangeStart,
                stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"]
                == \"cpu\")\n  |> filter(fn: (r) => r[\"host\"] == v.pfsense_host)\n
                \ |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn:
                (r) => r[\"_field\"] == \"usage_idle\")\n  |> map(fn: (r) => ({\n
                \     r with \n      _value: 100.0 - r._value\n      })\n  )"
        width: 5
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - label: bandwidth in Kbit/s
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Outbound Traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_sent")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["interface"] == v.pfsense_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        suffix: ' kbit/s'
        width: 3
        yPos: 3
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: path
            fieldName: path
            visible: true
          - displayName: dest_ip
            fieldName: dest_ip
            visible: true
          - displayName: dest_port
            fieldName: dest_port
            visible: true
          - displayName: in_iface
            fieldName: in_iface
            visible: true
          - displayName: src_ip
            fieldName: src_ip
            visible: true
          - displayName: src_port
            fieldName: src_port
            visible: true
          - displayName: timestamp
            fieldName: timestamp
            visible: true
          - displayName: alert_category
            fieldName: alert_category
            visible: true
          - displayName: alert_signature
            fieldName: alert_signature
            visible: true
        height: 4
        kind: Table
        name: Suricata Alerts
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "tail_suricata_alerts")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_field"] == "src_port" or r["_field"] == "src_ip" or r["_field"] == "dest_ip" or r["_field"] == "dest_port" or r["_field"] == "timestamp" or r["_field"] == "alert_signature"or r["_field"] == "alert_category")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> group()
                  |> keep(columns: ["timestamp","dest_ip","dest_port","src_ip","src_port","alert_signature","alert_category"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 6
        yPos: 6
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: class
            fieldName: class
            visible: true
          - displayName: protocol
            fieldName: protocol
            visible: true
          - displayName: src_port
            fieldName: src_port
            visible: true
          - displayName: src_ip
            fieldName: src_ip
            visible: true
          - displayName: dest_port
            fieldName: dest_port
            visible: true
          - displayName: dest_ip
            fieldName: dest_ip
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: path
            fieldName: path
            visible: true
        height: 4
        kind: Table
        name: Snort
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "tail_snort_alerts")
                  |> filter(fn: (r) => r["_field"] == "src_port" or r["_field"] == "dest_port")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> group()
                  |> keep(columns: ["class","dest_ip","dest_port","src_ip","src_port","protocol"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 6
        yPos: 10
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Inbound traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_recv")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["interface"] == v.pfsense_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        suffix: ' kbit/s'
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: f7c882e7-4cbc-4866-ad30-1983e0a16973
            name: thunder
            type: text
            value: 75
          - hex: '#DC4E58'
            id: e49de539-299f-46ff-bb93-87484702f113
            name: fire
            type: text
            value: 95
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Ram usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
        width: 5
        xCol: _time
        xPos: 5
        yCol: _value
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: DstIP
            fieldName: DstIP
            visible: true
          - displayName: FeedName
            fieldName: FeedName
            visible: true
          - displayName: GeoIP
            fieldName: GeoIP
            visible: true
          - displayName: SrcIP
            fieldName: SrcIP
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: path
            fieldName: path
            visible: true
          - displayName: count
            fieldName: count
            visible: true
        height: 3
        kind: Table
        name: Top Blocked Countries
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "tail_ipblock")
                  |> filter(fn: (r) => r["_field"] == "action")
                  |> group(columns: ["GeoIP"], mode:"by")
                  |> count()
                  |> group()
                  |> limit(n:20, offset: 0)
                  |> drop(columns: ["_start", "_stop"])
                  |> rename(columns: {_value: "count"})
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 6
        yPos: 3
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: DstIP
            fieldName: DstIP
            visible: true
          - displayName: FeedName
            fieldName: FeedName
            visible: true
          - displayName: GeoIP
            fieldName: GeoIP
            visible: true
          - displayName: SrcIP
            fieldName: SrcIP
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: path
            fieldName: path
            visible: true
          - displayName: count
            fieldName: count
            visible: true
          - displayName: DestIP
            fieldName: DestIP
            visible: true
        height: 4
        kind: Table
        name: IP Blocks By Feed
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "tail_ipblock")
                  |> filter(fn: (r) => r["_field"] == "action")
                  |> group(columns: ["FeedName"], mode:"by")
                  |> count()
                  |> group()
                  |> limit(n:20, offset: 0)
                  |> drop(columns: ["_start", "_stop"])
                  |> rename(columns: {_value: "count"})
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 6
        yPos: 6
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: destination
            fieldName: destination
            visible: true
          - displayName: count
            fieldName: count
            visible: true
        height: 3
        kind: Table
        name: DNSBL Top Domains
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "tail_dnsbl")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_field"] == "hitormiss")
                  |> group(columns: ["destination"], mode:"by")
                  |> count()
                  |> group()
                  |> limit(n:20, offset: 0)
                  |> drop(columns: ["_start", "_stop"])
                  |> rename(columns: {_value: "count"})
        tableOptions:
            sortBy: count
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 8
        yPos: 3
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        decimalPlaces: 0
        fieldOptions:
          - displayName: destination
            fieldName: destination
            visible: true
          - displayName: source
            fieldName: source
            visible: true
          - displayName: count
            fieldName: count
            visible: true
        height: 4
        kind: Table
        name: DNSBL Top Sources
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "tail_dnsbl")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_field"] == "hitormiss")
                  |> group(columns: ["source"], mode:"by")
                  |> count()
                  |> group()
                  |> limit(n:20, offset: 0)
                  |> drop(columns: ["_start", "_stop"])
                  |> rename(columns: {_value: "count"})
        tableOptions:
            sortBy: count
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 8
        yPos: 6
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Uptime
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |>filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "uptime_format")
        width: 2
        xPos: 10
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 1
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load1")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
        width: 2
        xPos: 10
        yPos: 1
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 15
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load15")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
        width: 2
        xPos: 10
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: CPU Count
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "n_cpus")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
        width: 2
        xPos: 10
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Memory
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_field"] == "total")
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 1000000000
                    })
                  )
        width: 2
        xPos: 10
        yPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Number of blocked IPs
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "tail_ipblock")
                  |> filter(fn: (r) => r["_field"] == "action")
                  |> keep(columns: ["_value"])
                  |> map(fn: (r) => ({new_column: r._value, _value:r._value}))
                  |> group(columns: ["new_column"])
                  |>count()
        width: 2
        xPos: 10
        yPos: 5
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Number of DNS Blocks
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "tail_dnsbl")
                  |> filter(fn: (r) => r["_field"] == "hitormiss")
                  |> keep(columns: ["_value"])
                  |> map(fn: (r) => ({new_column: r._value, _value:r._value}))
                  |> group(columns: ["new_column"])
                  |> group()
                  |> count()
        width: 2
        xPos: 10
        yPos: 6
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Number of IPS Alerts
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
                  |> filter(fn: (r) => r["_measurement"] == "tail_suricata_alerts" or r["_measurement"] == "tail_snort_alerts")
                  |> filter(fn: (r) => r["_field"] == "alert_gid" or r["_field"] == "idk")
                  |> keep(columns: ["_value"])
                  |> count()
        width: 2
        xPos: 10
        yPos: 7
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Disk usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "pfsense")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "disk")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.pfsense_host)
        width: 2
        xCol: _time
        xPos: 10
        yCol: _value
        yPos: 8
    name: Pfsense Metrics
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: musing-goldwasser-39f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 4
        kind: Single_Stat_Plus_Line
        name: Ram usage per node
        position: overlaid
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "memory")
                  |> filter(fn: (r) => r["_field"] == "memused" or r["_field"] == "memtotal")
                  |> filter(fn: (r) => r["host"] == v.pve_node)
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with _value: r.memused / r.memtotal * 100.0}))
        width: 5
        xCol: _time
        yCol: _value
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        decimalPlaces: 2
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: nodename
            fieldName: nodename
            visible: true
          - displayName: object
            fieldName: object
            visible: true
          - displayName: vmid
            fieldName: vmid
            visible: true
          - displayName: cpus
            fieldName: cpus
            visible: true
          - displayName: maxmem
            fieldName: maxmem
            visible: true
          - displayName: mem
            fieldName: mem
            visible: true
          - displayName: percentmem
            fieldName: percentmem
            visible: true
          - displayName: cpu
            fieldName: cpu
            visible: true
          - displayName: qmpstatus
            fieldName: qmpstatus
            visible: true
        height: 4
        kind: Table
        name: Containers
        queries:
          - query: |-
                import "math"
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["nodename"] == v.pve_node)
                  |> filter(fn: (r) => r["object"] == "lxc" or r["object"] == "qemu")
                  |> filter(fn: (r) => r["_field"] == "cpus" or r["_field"] == "maxmem" or r["_field"] == "mem" or r["_field"] == "cpu" or r["_field"] == "qmpstatus")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with maxmem: r.maxmem / 1073742000.0}))
                  |> map(fn: (r) => ({ r with mem: r.mem / 1073742000.0}))
                  |> map(fn: (r) => ({ r with percentmem: r.mem / r.maxmem * 100.0}))
                  |> map(fn: (r) => ({ r with cpu: r.cpu * 100.0}))
                  |> sort(columns: ["_time"], desc: true)
                  |> limit(n:1, offset: 0)
                  |> group()
                  |> keep(columns: ["host","vmid","object","cpus","cpu","mem","maxmem","percentmem"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 10
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 4
        kind: Single_Stat_Plus_Line
        name: CPU
        position: overlaid
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cpustat")
                  |> filter(fn: (r) => r["_field"] == "cpu" or r["_field"] == "cpus")
                  |> filter(fn: (r) => r["host"] == v.pve_node)
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with _value: r.cpu * 100.0}))
        width: 5
        xCol: _time
        xPos: 5
        yCol: _value
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load1
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cpustat")
                  |> filter(fn: (r) => r["_field"] == "avg1")
                  |> filter(fn: (r) => r["host"] == v.pve_node)
        width: 2
        xPos: 10
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 15
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cpustat")
                  |> filter(fn: (r) => r["_field"] == "avg15")
                  |> filter(fn: (r) => r["host"] == v.pve_node)
        width: 2
        xPos: 10
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: IO Wait
        position: overlaid
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cpustat")
                  |> filter(fn: (r) => r["host"] == v.pve_node)
                  |> filter(fn: (r) => r["_field"] == "wait")
                  |> map(fn: (r) => ({ r with _value: r._value * 100.0}))
        width: 2
        xCol: _time
        xPos: 10
        yCol: _value
        yPos: 2
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        decimalPlaces: 0
        fieldOptions:
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: nodename
            fieldName: nodename
            visible: true
          - displayName: object
            fieldName: object
            visible: true
          - displayName: total
            fieldName: total
            visible: true
          - displayName: type
            fieldName: type
            visible: true
          - displayName: used
            fieldName: used
            visible: true
          - displayName: percent
            fieldName: percent
            visible: true
          - displayName: pool
            fieldName: pool
            visible: true
        height: 4
        kind: Table
        name: Storage
        queries:
          - query: |-
                from(bucket: "proxmox")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["nodename"] == v.pve_node)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "used" or r["_field"] == "total")
                  |> filter(fn: (r) => r["object"] == "storages")
                  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with _value: r.used / r.total * 100.0}))
                  |> map(fn: (r) => ({ r with used: r.used / (1.00737*10.0^9.0)}))
                  |> map(fn: (r) => ({ r with total: r.total / (1.00737*10.0^9.0)}))
                  |> last()
                  |> group()
                  |> rename(columns: {host: "pool", _value: "percent"})
                  |> keep(columns: ["used","total","percent","pool"])
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 10
        yPos: 4
    name: Proxmox Metrics
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: terrifying-ellis-79f001
spec:
    associations:
      - kind: Label
        name: admiring-swanson-39f001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: 7ad08427-2243-4cd2-be6a-3f30bf398e19
            name: thunder
            type: text
            value: 75
          - hex: '#DC4E58'
            id: ea9ba36d-5106-4b57-8b9b-f6e1a4047577
            name: fire
            type: text
            value: 90
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: CPU usage
        position: overlaid
        queries:
          - query: "import \"math\"\nfrom(bucket: \"windows\")\n  |> range(start:
                v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"]
                == \"cpu\")\n  |> filter(fn: (r) => r[\"host\"] == v.windows_host)\n
                \ |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn:
                (r) => r[\"_field\"] == \"usage_idle\")\n  |> map(fn: (r) => ({\n
                \     r with \n      _value: 100.0 - r._value\n      })\n  )"
        width: 3
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Outbound Traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_sent")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
                  |> filter(fn: (r) => r["interface"] == v.windows_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        width: 3
        yPos: 3
      - colors:
          - hex: '#ffffff'
            id: base
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: Channel
            fieldName: Channel
            visible: true
          - displayName: Computer
            fieldName: Computer
            visible: true
          - displayName: EventID
            fieldName: EventID
            visible: true
          - displayName: Keywords
            fieldName: Keywords
            visible: true
          - displayName: Level
            fieldName: Level
            visible: true
          - displayName: LevelText
            fieldName: LevelText
            visible: true
          - displayName: Source
            fieldName: Source
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: host
            fieldName: host
            visible: true
        height: 3
        kind: Table
        name: Defender logs
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "win_eventlog")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
                  |> filter(fn: (r) => r["_field"] == "Message")
                  |> group()
                  |> keep(columns: ["EventID","LevelText","_value","_time"])
                  |> limit(n:10, offset: 0)
        tableOptions:
            sortBy: _time
            verticalTimeAxis: true
        timeFormat: YYYY/MM/DD HH:mm:ss
        width: 10
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: cf788902-8e79-480c-8082-9868e7371c43
            name: thunder
            type: text
            value: 70
          - hex: '#DC4E58'
            id: dcd379b1-b952-4671-8538-15638459ba7c
            name: fire
            type: text
            value: 95
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Ram usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Inbound traffic
        position: overlaid
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "net")
                  |> filter(fn: (r) => r["_field"] == "bytes_recv")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
                  |> filter(fn: (r) => r["interface"] == v.windows_interface)
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 125
                    })
                  )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> yield(name: "derivative")
                  |> last()
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#FFD255'
            id: a22aad54-4730-475a-b450-f7c57ffad4ba
            name: thunder
            type: text
            value: 70
          - hex: '#DC4E58'
            id: 76df6157-e560-4a32-a4ec-e5d30f38993c
            name: fire
            type: text
            value: 95
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Disk usage
        position: overlaid
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "disk")
                  |> filter(fn: (r) => r["_field"] == "used_percent")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 4
        xCol: _time
        xPos: 6
        yCol: _value
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: display_name
            fieldName: display_name
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: service_name
            fieldName: service_name
            visible: true
          - displayName: status
            fieldName: status
            visible: true
          - displayName: startup_mode
            fieldName: startup_mode
            visible: true
          - displayName: state
            fieldName: state
            visible: true
          - displayName: startup
            fieldName: startup
            visible: true
          - displayName: starup_mode
            fieldName: starup_mode
            visible: true
        height: 3
        kind: Table
        name: Services
        queries:
          - query: "from(bucket: \"windows\")\n  |> range(start: v.timeRangeStart,
                stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"]
                == \"win_services\")\n  |> filter(fn: (r) => r[\"_field\"] == \"state\"
                or r[\"_field\"] == \"starup_mode_mode\")\n  |> filter(fn: (r) =>
                r[\"host\"] == v.windows_host) \n  |> first()\n  |> group()\n    |>
                pivot(rowKey:[\"service_name\"], columnKey: [\"_field\"], valueColumn:
                \"_value\")\n  |> map(fn: (r) => ({ r with state: \n    if r.state
                == 1 then \"stopped\" \n    else if r.state == 2 then \"starting\"\n
                \   else if r.state == 3 then \"stopping\"\n    else if r.state ==
                4 then \"running\"\n    else if r.state == 5 then \"continuing\"\n
                \   else if r.state == 6 then \"pausing\"\n    else if r.state ==
                7 then \"paused\"\n    else \"unkown\" }))\n  |> map(fn: (r) => ({
                r with starup_mode: \n    if r.starup_mode == 0 then \"boot start\"
                \n    else if r.starup_mode == 1 then \"system start\"\n    else if
                r.starup_mode == 2 then \"auto start\"\n    else if r.starup_mode
                == 3 then \"manual\"\n    else if r.starup_mode == 4 then \"disabled\"\n
                \   else \"unkown\" }))"
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 4
        xPos: 6
        yPos: 2
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: URL
            fieldName: _value
            visible: true
        height: 1
        kind: Table
        name: Remote Access
        queries:
          - query: |-
                import "strings"
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "exec_meshinfo")
                  |> filter(fn: (r) => r["_field"] == "value")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
                  |> last()
                  |> keep(columns: ["_value"])
                  |> map(fn: (r) => ({ r with _value: strings.joinStr(arr: ["https://",v.mesh_info, "/?viewmode=11&gotonode=",r._value], v: "")}))
        tableOptions:
            fixFirstColumn: true
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 2
        xPos: 10
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Uptime
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |>filter(fn: (r) => r["host"] == v.windows_host)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "uptime_format")
        width: 2
        xPos: 10
        yPos: 1
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 1
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load5")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 2
        xPos: 10
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Load 15
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "load5")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 2
        xPos: 10
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: CPU Count
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "system")
                  |> filter(fn: (r) => r["_field"] == "n_cpus")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 2
        xPos: 10
        yPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Memory
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mem")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
                  |> filter(fn: (r) => r["_field"] == "total")
                  |> map(fn: (r) => ({
                      r with
                      _value: r._value / 1000000000
                    })
                  )
        width: 2
        xPos: 10
        yPos: 5
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Edition
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "exec_win_ver")
                  |> filter(fn: (r) => r["_field"] == "Caption")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 2
        xPos: 10
        yPos: 6
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Build
        queries:
          - query: |-
                from(bucket: "windows")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "exec_win_ver")
                  |> filter(fn: (r) => r["_field"] == "Version")
                  |> filter(fn: (r) => r["host"] == v.windows_host)
        width: 2
        xPos: 10
        yPos: 7
    name: Windows Metrics
